

Cursors
-Cursor is an interface and it is used to retrieve or fetch the objects or elements one by one from the Collection objects.
-Cursor has 3 types:
	1. Enumeration Interface
	2. Iterator Interface
	3. ListIterator Interface

NOTE: Also, Spliterator is added as a new cursor with Java 8.
-It provides support for parallel processing of stream of elements for any collection. 
-It provides tryAdvance() method to iterate elements individually in different threads. 
-It helps in parallel processing.



Enumeration vs Iterator vs ListIterator in Java
-Enumeration is used in the collection framework in java to retrieve the elements one by one. 
-Enumeration is a legacy interface that is applicable only for legacy classes like Vector, HashTable, Stack, etc. 
-It provides a single direction of iteration. 
-By using enumeration, we can perform only read operation.
-It provides 
	-hasMoreElements() method to check if elements are presented 
	-nextElement() method to retrieve the next element.



-Iterator is a universal cursor that can be applied to any collection object. 
-It provides a single direction iteration. 
-By using an iterator, we can perform both read and remove operation, but we cannot perform replace operation. 
-Iterator must be used whenever we want to enumerate elements in all collection framework implemented interfaces like Set, List, Queue, DeQue.
-It provides 
	-hasNext() method to check if elements are presented
	-next() method to retrieve the next element.
	-remove() method to remove-delete the current element.



-ListIterator is the most powerful cursor among all the three cursors. 
-ListIterator is only applicable for list implemented classes like ArrayList, LinkedList, Stack, etc. 
-ListIterator traverses both in the forward and backward direction. 
-By using ListIterator, we can perform read, remove, and replace operation. 
-The ListIterator must be used when we want to enumerate elements of the list.
-It provides 
	-hasNext() method to check if elements are presented
	-next() method to retrieve the next element.
	-remove() method to remove-delete the current element.
	-add(Object) method to add an object next to current element
	-set(Object) method to update-replace current object with a new object

NOTE: While traversing backward, we can use hasPrevious(), previous() methods

NOTE: It also provides nextIndex() and previousIndex() methods which return indexes of previous or next elements would be returned by a subsequent call.



Iterator vs For each loop
-Iterator is an interface provided by collection framework to traverse a collection and for a sequential access of items in the collection while for each loop is meant for traversing items in a collection one by one. 

MAIN DIFFERENCE:In for-each loop, we canâ€™t modify collection, it will throw a ConcurrentModificationException on the other hand with iterator we can modify collection. Modification means removing or adding element while traversing which changes the size of the collection.


